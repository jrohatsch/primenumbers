{"version":3,"sources":["DisplayNumber.js","serviceWorker.js","index.js","DashBoard.js"],"names":["DisplayNumber","this","value","counter","isCrossedOut","wasClicked","Boolean","window","location","hostname","match","ReactDOM","render","props","initArray","i","MAX","push","useState","numbers","setNumbers","crossOutMultiples","number","copyArray","index","length","renderedNumbers","forEach","onClick","displayNumber","classStyle","key","className","renderDisplayNumber","style","maxWidth","marginLeft","startAnimation","resetAnimation","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAEqBA,EAGpB,aAAe,oBACdC,KAAKC,MAAQF,EAAcG,QAC3BF,KAAKG,cAAe,EACpBH,KAAKI,YAAa,EAClBL,EAAcG,WAPKH,EACbG,QAAU,ECSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,mBCJF,SAAmBC,GAGjC,IAFA,IAAIC,EAAY,GAEPC,EAAI,EAAGA,EAAIF,EAAMG,MAAOD,EAChCD,EAAUG,KAAK,IAAIjB,GAJoB,MAOVkB,mBAASJ,GAPC,mBAOjCK,EAPiC,KAOxBC,EAPwB,KAkCxC,SAASC,EAAkBC,GAC1B,IAAIC,EAAS,YAAOJ,GAChBK,EAAQF,EAAOpB,MAAQ,EAE3BqB,EAAUC,GAAOnB,YAAa,EAE9B,IAAK,IAAIU,EAAIS,EAAQF,EAAOpB,MAAOa,EAAIQ,EAAUE,OAAQV,GAAKO,EAAOpB,MACpEqB,EAAUR,GAAGX,cAAe,EAG7BgB,EAAWG,GAGZ,IAAMG,EAAkB,GAQxB,OANAP,EAAQQ,SAAQ,SAACL,GAChBI,EAAgBT,KHxCX,SAA6BK,EAAQM,GAC3C,IAAIC,EAAgBP,EAAOlB,aAAe,gCAASkB,EAAOpB,OAAkBoB,EAAOpB,MAC/E4B,EAAaR,EAAOlB,aAAe,mBAAqB,gBAI5D,OAFIkB,EAAOjB,aAAYyB,GAAc,eAGpC,yBACCC,IAAKT,EAAOpB,MACZ8B,UAAWF,EACXF,QAAS,kBAAMA,EAAQN,KAEtBO,GG6BDI,CAAoBX,EAAQD,OAK7B,yBAAKa,MAAO,CAAEC,SAAU,OAAQC,WAAY,SAC3C,4EACA,gIAIA,yBAAKR,QAAS,kBArDhB,WACC,IAAIL,EAAS,YAAOJ,GAEpBI,EAAUI,SAAQ,SAACL,EAAQE,GAC1B,IAAIF,EAAOlB,aAAX,CAEAmB,EAAUC,GAAOnB,YAAa,EAE9B,IAAK,IAAIU,EAAIS,EAAQF,EAAOpB,MAAOa,EAAIQ,EAAUE,OAAQV,GAAKO,EAAOpB,MACpEqB,EAAUR,GAAGX,cAAe,MAG9BgB,EAAWG,GAyCUc,IAAkBL,UAAU,sBAAhD,SAGA,yBAAKJ,QAAS,kBAzChB,WACC,IAAIL,EAAS,YAAOJ,GAEpBI,EAAUI,SAAQ,SAACL,GAClBA,EAAOjB,YAAa,EACpBiB,EAAOlB,cAAe,KAEvBgB,EAAWG,GAkCUe,IAAkBN,UAAU,sBAAhD,SAICN,KDjEa,CAAYV,IAAQ,OAAWuB,SAASC,eAAe,SD0HlE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2a19a9dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class DisplayNumber {\r\n\tstatic counter = 2;\r\n\r\n\tconstructor() {\r\n\t\tthis.value = DisplayNumber.counter;\r\n\t\tthis.isCrossedOut = false;\r\n\t\tthis.wasClicked = false;\r\n\t\tDisplayNumber.counter++;\r\n\t}\r\n}\r\n\r\nexport function renderDisplayNumber(number, onClick) {\r\n\tlet displayNumber = number.isCrossedOut ? <strike>{number.value}</strike> : number.value;\r\n\tlet classStyle = number.isCrossedOut ? 'number notPrime ' : 'number prime ';\r\n\r\n\tif (number.wasClicked) classStyle += 'wasClicked ';\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tkey={number.value}\r\n\t\t\tclassName={classStyle}\r\n\t\t\tonClick={() => onClick(number)}\r\n\t\t>\r\n\t\t\t{displayNumber}\r\n\t\t</div>\r\n\t);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport DashBoard from './DashBoard.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < DashBoard MAX = { 1999 } />, document.getElementById('root'));\r\n\r\n serviceWorker.unregister();","import React, { useState } from 'react';\r\nimport DisplayNumber, { renderDisplayNumber } from './DisplayNumber.js';\r\n\r\nexport default function DashBoard(props) {\r\n\tlet initArray = [];\r\n\r\n\tfor (let i = 0; i < props.MAX; ++i) {\r\n\t\tinitArray.push(new DisplayNumber());\r\n\t}\r\n\r\n\tconst [numbers, setNumbers] = useState(initArray);\r\n\r\n\tfunction startAnimation() {\r\n\t\tlet copyArray = [...numbers];\r\n\r\n\t\tcopyArray.forEach((number, index) => {\r\n\t\t\tif (number.isCrossedOut) return;\r\n\r\n\t\t\tcopyArray[index].wasClicked = true;\r\n\r\n\t\t\tfor (let i = index + number.value; i < copyArray.length; i += number.value) {\r\n\t\t\t\tcopyArray[i].isCrossedOut = true;\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetNumbers(copyArray);\r\n\t}\r\n\r\n\tfunction resetAnimation() {\r\n\t\tlet copyArray = [...numbers];\r\n\r\n\t\tcopyArray.forEach((number) => {\r\n\t\t\tnumber.wasClicked = false;\r\n\t\t\tnumber.isCrossedOut = false;\r\n\t\t});\r\n\t\tsetNumbers(copyArray);\r\n\t}\r\n\r\n\tfunction crossOutMultiples(number) {\r\n\t\tlet copyArray = [...numbers];\r\n\t\tlet index = number.value - 2;\r\n\r\n\t\tcopyArray[index].wasClicked = true;\r\n\r\n\t\tfor (let i = index + number.value; i < copyArray.length; i += number.value) {\r\n\t\t\tcopyArray[i].isCrossedOut = true;\r\n\t\t}\r\n\r\n\t\tsetNumbers(copyArray);\r\n\t}\r\n\r\n\tconst renderedNumbers = [];\r\n\r\n\tnumbers.forEach((number) => {\r\n\t\trenderedNumbers.push(\r\n\t\t\trenderDisplayNumber(number, crossOutMultiples)\r\n\t\t);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div style={{ maxWidth: '80vw', marginLeft: '10vw' }}>\r\n\t\t\t<h2>Sieve of Eratosthenes in Realtime JavaScript</h2>\r\n\t\t\t<h3>\r\n\t\t\t\tClick on the Numbers to cross out the multiples of it, or press START\r\n\t\t\t\tto do this for all numbers\r\n\t\t\t</h3>\r\n\t\t\t<div onClick={() => startAnimation()} className='startButton Button'>\r\n\t\t\t\tStart\r\n\t\t\t</div>\r\n\t\t\t<div onClick={() => resetAnimation()} className='resetButton Button'>\r\n\t\t\t\tReset\r\n\t\t\t</div>\r\n\r\n\t\t\t{renderedNumbers}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}