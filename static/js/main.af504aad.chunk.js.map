{"version":3,"sources":["DisplayNumber.js","serviceWorker.js","index.js","DashBoard.js"],"names":["DisplayNumber","this","value","counter","isCrossedOut","Boolean","window","location","hostname","match","ReactDOM","render","props","initArray","i","MAX","push","useState","numbers","setNumbers","renderedNumbers","map","number","index","key","className","style","maxWidth","marginLeft","onClick","copyArray","forEach","length","startAnimation","resetAnimation","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MACqBA,EAGpB,aAAe,oBACdC,KAAKC,MAAQF,EAAcG,QAC3BF,KAAKG,cAAe,EACpBJ,EAAcG,WANKH,EACbG,QAAU,ECUEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,mBCJF,SAAmBC,GAGjC,IAFA,IAAIC,EAAY,GAEPC,EAAI,EAAGA,EAAIF,EAAMG,MAAOD,EAChCD,EAAUG,KAAK,IAAIhB,GAJoB,MAOViB,mBAASJ,GAPC,mBAOjCK,EAPiC,KAOxBC,EAPwB,KA+BlCC,EAAkBF,EAAQG,KAAI,SAACC,EAAQC,GAAT,OACnC,yBAAKC,IAAKD,EAAOE,UAAWH,EAAOlB,aAAe,kBAAoB,gBACpEkB,EAAOpB,UAGV,OACC,yBAAKwB,MAAO,CAAEC,SAAU,OAAQC,WAAY,SAC3C,4EACA,yBAAKC,QAAS,kBA9BhB,WACC,IAAIC,EAAS,YAAOZ,GAEpBY,EAAUC,SAAQ,SAACT,EAAQC,GAC1B,IAAID,EAAOlB,aAEX,IAAK,IAAIU,EAAIS,EAAQD,EAAOpB,MAAOY,EAAIgB,EAAUE,OAAQlB,GAAKQ,EAAOpB,MACpE4B,EAAUhB,GAAGV,cAAe,KAG9Be,EAAWW,GAoBUG,IAAkBR,UAAU,sBAAhD,SAGA,yBAAKI,QAAS,kBApBhB,WACC,IAAIC,EAAS,YAAOZ,GAEpBY,EAAUC,SAAQ,SAACT,GAClBA,EAAOlB,cAAe,KAEvBe,EAAWW,GAcUI,IAAkBT,UAAU,sBAAhD,SAICL,KD1Ca,CAAYL,IAAQ,MACzBoB,SAASC,eAAe,SDyH9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.af504aad.chunk.js","sourcesContent":["\nexport default class DisplayNumber {\n\tstatic counter = 2;\n\n\tconstructor() {\n\t\tthis.value = DisplayNumber.counter;\n\t\tthis.isCrossedOut = false;\n\t\tDisplayNumber.counter++;\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport DashBoard from './DashBoard.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < DashBoard MAX = { 5000 }\n        />, document.getElementById('root'));\n\n        serviceWorker.unregister();","import React, { useState } from 'react';\nimport DisplayNumber from './DisplayNumber.js';\n\nexport default function DashBoard(props) {\n\tlet initArray = [];\n\n\tfor (let i = 0; i < props.MAX; ++i) {\n\t\tinitArray.push(new DisplayNumber());\n\t}\n\n\tconst [numbers, setNumbers] = useState(initArray);\n\n\tfunction startAnimation() {\n\t\tlet copyArray = [...numbers];\n\n\t\tcopyArray.forEach((number, index) => {\n\t\t\tif (number.isCrossedOut) return;\n\n\t\t\tfor (let i = index + number.value; i < copyArray.length; i += number.value) {\n\t\t\t\tcopyArray[i].isCrossedOut = true;\n\t\t\t}\n\t\t});\n\t\tsetNumbers(copyArray);\n\t}\n\n\tfunction resetAnimation() {\n\t\tlet copyArray = [...numbers];\n\n\t\tcopyArray.forEach((number) => {\n\t\t\tnumber.isCrossedOut = false;\n\t\t});\n\t\tsetNumbers(copyArray);\n\t}\n\n\tconst renderedNumbers = numbers.map((number, index) => (\n\t\t<div key={index} className={number.isCrossedOut ? 'number notPrime' : 'number prime'}>\n\t\t\t{number.value}\n\t\t</div>));\n\n\treturn (\n\t\t<div style={{ maxWidth: '80vw', marginLeft: '10vw' }}>\n\t\t\t<h2>Sieve of Eratosthenes in Realtime JavaScript</h2>\n\t\t\t<div onClick={() => startAnimation()} className='startButton Button'>\n\t\t\t\tStart\n\t\t\t</div>\n\t\t\t<div onClick={() => resetAnimation()} className='resetButton Button'>\n\t\t\t\tReset\n\t\t\t</div>\n\n\t\t\t{renderedNumbers}\n\t\t</div>\n\t);\n}\n\n\n\n\n\n"],"sourceRoot":""}