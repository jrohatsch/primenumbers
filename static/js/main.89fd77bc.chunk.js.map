{"version":3,"sources":["DisplayNumber.js","DashBoard.js","RenderNumber.js","serviceWorker.js","index.js"],"names":["DisplayNumber","this","value","counter","wasRead","isCrossedOut","DashBoard","state","nArray","localArray","i","push","setState","forEach","number","index","length","checkPrime","style","maxWidth","marginLeft","onClick","startAnimation","className","array","output","classNumber","out","key","renderNumbers","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAEqBA,EAEpB,aAAc,oBACbC,KAAKC,MAAQF,EAAcG,QAC3BF,KAAKG,SAAU,EACfH,KAAKI,cAAe,EACpBL,EAAcG,WANKH,EACbG,QAAU,E,ICCGG,E,YACpB,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CACZC,OAAQ,IAHG,E,iFASZ,IADA,IAAIC,EAAaR,KAAKM,MAAMC,OACpBE,EAAE,EAAEA,EAAE,OAAOA,EACpBD,EAAWE,KAAK,IAAIX,GAErBC,KAAKW,SAAS,CAACJ,OAAQC,M,uCAKvB,IAAIA,EAAaR,KAAKM,MAAMC,OAE5BC,EAAWI,SAAQ,SAACC,EAAOC,GAC1B,IAAGD,EAAOT,aACV,IAAI,IAAIK,EAAEK,EAAM,EAAEL,EAAED,EAAWO,SAASN,EACpCD,EAAWC,GAAGR,MAAQY,EAAOZ,OAAS,IACxCO,EAAWC,GAAGL,cAAa,MAI9BJ,KAAKW,SAAS,CAACJ,OAAQC,IACvBR,KAAKgB,e,mCAIL,IAAIR,EAAaR,KAAKM,MAAMC,OAE5BC,EAAWI,SAAQ,SAACC,EAAOC,GAC1BD,EAAOV,SAAU,KAGlBH,KAAKW,SAAS,CAACJ,OAAQC,M,+BAGf,IAAD,OACR,OACC,yBAAKS,MAAO,CAACC,SAAU,OAAQC,WAAY,SAC1C,4EACA,yBAAKC,QAAS,kBAAI,EAAKC,kBAAkBC,UAAU,eAAnD,SChDY,SAAuBC,GACrC,IAAIC,EAAS,GAqBb,OAnBAD,EAAMX,SAAQ,SAACC,GACA,IAAIY,EAAc,SAC5BC,EAAMb,EAAOZ,MAEdY,EAAOV,SAAWU,EAAOT,aAC1BqB,EAAc,kBAGRZ,EAAOV,UAAYU,EAAOT,eAChCqB,EAAc,gBAIhBD,EAAOd,KACL,yBAAKiB,IAAKd,EAAOZ,MAAOqB,UAAWG,GACnCC,OAIIF,ED8BJI,CAAc5B,KAAKM,MAAMC,a,GAlDUsB,IAAMC,WEQzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.89fd77bc.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class DisplayNumber{\n\tstatic counter = 2;\n\tconstructor(){\n\t\tthis.value = DisplayNumber.counter;\n\t\tthis.wasRead = false;\n\t\tthis.isCrossedOut = false;\n\t\tDisplayNumber.counter++;\t\n\t}\n\n}\n","import React, {useState} from 'react';\nimport DisplayNumber from './DisplayNumber.js';\nimport renderNumbers from './RenderNumber.js';\n\nexport default class DashBoard extends React.Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tnArray: []\t\t\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tlet localArray = this.state.nArray;\n\t\tfor(let i=0;i<4999;++i){\n\t\t\tlocalArray.push(new DisplayNumber());\n\t\t}\n\t\tthis.setState({nArray: localArray});\n\t}\n\n\n\tstartAnimation(){\n\t\tlet localArray = this.state.nArray;\n\t\t\n\t\tlocalArray.forEach((number,index)=>{\n\t\t\tif(number.isCrossedOut) return;\n\t\t\tfor(let i=index+1;i<localArray.length;++i){\n\t\t\t\tif(localArray[i].value % number.value == 0){\n\t\t\t\t\tlocalArray[i].isCrossedOut=true;\t\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t});\n\t\tthis.setState({nArray: localArray});\n\t\tthis.checkPrime();\n\t}\n\n\tcheckPrime(){\n\t\tlet localArray = this.state.nArray;\n\t\t\n\t\tlocalArray.forEach((number,index)=>{\n\t\t\tnumber.wasRead = true;\n\t\t});\n\n\t\tthis.setState({nArray: localArray});\n\t}\n\t\t\t\n\trender(){\n\treturn(\n\t\t<div style={{maxWidth: '80vw', marginLeft: '10vw'}}>\n\t\t\t<h2>Sieve of Eratosthenes in Realtime JavaScript</h2>\n\t\t\t<div onClick={()=>this.startAnimation()} className='startButton'>\n\t\t\t\tStart\n\t\t\t</div>\n\t\t\t\n\t\t\t{renderNumbers(this.state.nArray)}\n\t\t</div>\t\n\t);\n\t}\n}\n\n\n\n\n","import React from 'react';\n\nexport default function renderNumbers(array) {\n\tlet output = [];\n\n\tarray.forEach((number)=>{\n                let classNumber = 'number';\n\t\tlet out = number.value;\n\n\t\tif(number.wasRead && number.isCrossedOut){\n\t\t  classNumber = 'number notPrime';\n\t\t  //out = <strike>{number.value}</strike>;\n\t\t}\n\t\telse if(number.wasRead && !number.isCrossedOut){\n\t\t  classNumber = 'number prime';\n\t\t  //console.log('Found ',number.value);\n\t\t}\n\n\t\toutput.push(\n\t\t  <div key={number.value} className={classNumber}>\n\t\t\t{out}\n\t\t  </div>);\t\n\t});\t\n\n\treturn output;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport DashBoard from './DashBoard.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DashBoard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}